### **Explicación del Sistema: `stationUtils`, `searchUtils` y `dataUtils`**

Este documento explica la arquitectura y funcionalidad de los tres módulos principales (`stationUtils`, `searchUtils` y `dataUtils`) que conforman el sistema de búsqueda y recuperación de información de estaciones de metro. Estos módulos trabajan juntos para proporcionar una experiencia fluida al buscar y mostrar información de estaciones.

---

### **1. `dataUtils` - Carga y Gestión de Datos**

#### **Propósito:**
- **Cargar y preprocesar los datos de las estaciones** desde archivos JSON.
- **Proporcionar acceso a los datos de las estaciones** mediante funciones utilitarias como `getStation` y `getAllStations`.

#### **Funciones Clave:**

1. **`loadStationData()`**:
   - Carga los datos de las estaciones desde `stations.json` y `stationsData.json`.
   - Preprocesa los datos en un formato estructurado para consultas eficientes.
   - Almacena en caché los datos preprocesados en memoria para acceso rápido.

2. **`getStation(identificador)`**:
   - Recupera información detallada de una estación específica utilizando su **nombre normalizado**.
   - Admite coincidencias exactas, normalizadas y fonéticas para búsquedas flexibles.

3. **`getAllStations()`**:
   - Devuelve todos los datos de las estaciones preprocesados como un objeto estructurado.
   - Utilizado por `searchUtils` para realizar búsquedas en todas las estaciones.

#### **Estructura de Datos:**

- **`stations`**: Un mapa de todas las estaciones, indexado por sus **nombres normalizados**.
- **`normalizedMap`**: Un mapa que vincula nombres normalizados a objetos de estación.
- **`routeMap`**: Un mapa que agrupa las estaciones por sus rutas.

#### **Ejemplo:**

```javascript
const station = getStation("sanpablol1");
// Devuelve:
{
  original: "San Pablo L1",
  normalized: "sanpablol1",
  line: "1",
  transfer: "5",
  status: { description: "Habilitada" },
  details: { services: ["ATM", "WiFi"], accessibility: "Accesible" }
}
```

---

### **2. `searchUtils` - Lógica de Búsqueda y Coincidencias**

#### **Propósito:**
- Realizar **búsquedas profundas** de estaciones utilizando múltiples estrategias de coincidencia (exacta, parcial, fonética).
- Manejar **desambiguación** cuando se encuentran múltiples coincidencias.
- Devolver coincidencias en un formato compatible con `dataUtils`.

#### **Funciones Clave:**

1. **`deepSearch(query, options)`**:
   - Busca estaciones que coincidan con la consulta.
   - Admite **filtrado por línea** (por ejemplo, "San Pablo L1").
   - Devuelve coincidencias ordenadas por relevancia (puntaje).

2. **`fuzzySearch(query, stations, options)`**:
   - Realiza coincidencias aproximadas utilizando **similitud de cadenas** y **coincidencia fonética**.
   - Filtra los resultados por un umbral mínimo de similitud (por defecto: 0.75).

3. **`findExactMatches(query)`**:
   - Encuentra coincidencias exactas utilizando el **nombre normalizado**.

4. **`findPartialMatches(query)`**:
   - Encuentra coincidencias parciales utilizando **coincidencias de subcadenas**.

#### **Estrategias de Coincidencia:**

1. **Coincidencia Exacta**:
   - Compara la consulta directamente con el **nombre normalizado** de cada estación.

2. **Coincidencia Parcial**:
   - Verifica si la consulta es una subcadena del nombre de la estación o viceversa.

3. **Coincidencia Fonética**:
   - Utiliza el **algoritmo Metaphone** para comparar la representación fonética de la consulta y los nombres de las estaciones.

#### **Ejemplo:**

```javascript
const matches = deepSearch("San Pablo");
// Devuelve:
[
  {
    name: "San Pablo L1",
    normalized: "sanpablol1",
    line: "1",
    score: 1.0
  },
  {
    name: "San Pablo L5",
    normalized: "sanpablol5",
    line: "5",
    score: 0.9
  }
]
```

---

### **3. `stationUtils` - Manejo de Comandos y Creación de Embeds**

#### **Propósito:**
- Manejar el comando `/estacion` en Discord.
- Mostrar información de la estación en un **embed**.
- Utilizar `searchUtils` y `dataUtils` para obtener y formatear los datos.

#### **Funciones Clave:**

1. **`autocomplete(interaction)`**:
   - Proporciona sugerencias de autocompletado para los nombres de las estaciones.
   - Utiliza `deepSearch` para encontrar coincidencias para la entrada del usuario.

2. **`execute(interaction)`**:
   - Procesa la consulta del usuario.
   - Utiliza `deepSearch` para encontrar la mejor coincidencia.
   - Obtiene datos detallados de la estación utilizando `getStation`.
   - Muestra los datos en un embed.

3. **`createEmbed(station)`**:
   - Formatea los datos de la estación en un embed de Discord.
   - Incluye campos para estado, conexiones, servicios, accesibilidad, comercios y comuna.

#### **Flujo de Trabajo Ejemplo:**

1. **Entrada del Usuario:** `/estacion San Pablo L1`
2. **Función `execute`:**
   - Analiza la consulta en `name = "San Pablo"` y `line = "1"`.
   - Llama a `deepSearch("San Pablo", { lineFilter: "1" })`.
   - Obtiene datos detallados utilizando `getStation("sanpablol1")`.
   - Muestra el embed.

#### **Ejemplo de Embed:**

```
🚉 San Pablo L1 (Línea 1)
---------------------------------
Estado: 🟢 Operativa
Conexiones: L5
Servicios: ATM, WiFi
Accesibilidad: Accesible
Comercios: Cafetería, Tienda
Comuna: Santiago
```

---

### **Flujo de Datos**

1. **Interacción del Usuario:**
   - El usuario escribe `/estacion San Pablo L1` en Discord.

2. **Autocompletado:**
   - La función `autocomplete` llama a `deepSearch("San Pablo")`.
   - Devuelve sugerencias como `San Pablo L1`, `San Pablo L5`.

3. **Ejecución del Comando:**
   - La función `execute` analiza la consulta y llama a `deepSearch("San Pablo", { lineFilter: "1" })`.
   - Obtiene datos detallados utilizando `getStation("sanpablol1")`.
   - Muestra el embed.

4. **Búsqueda y Coincidencias:**
   - `deepSearch` utiliza `getAllStations` para acceder a todos los datos de las estaciones.
   - Aplica coincidencias exactas, parciales y fonéticas para encontrar los mejores resultados.

5. **Obtención de Datos:**
   - `getStation` recupera datos detallados de la estación desde la caché preprocesada.

---

### **Características Clave**

1. **Manejo Eficiente de Datos:**
   - Los datos de las estaciones se preprocesan y almacenan en caché para un acceso rápido.
   - Admite coincidencias exactas, parciales y fonéticas.

2. **Búsqueda Flexible:**
   - Maneja consultas con o sin sufijos de línea (por ejemplo, "San Pablo L1").
   - Admite desambiguación para consultas ambiguas.

3. **Salida Amigable para el Usuario:**
   - Muestra la información de la estación en un embed limpio y formateado.
   - Proporciona sugerencias de autocompletado para facilitar su uso.

---

### **Cómo Usarlo en Otros Archivos**

Para utilizar este sistema en otros archivos, sigue estos pasos:

1. **Importar los Módulos Necesarios:**
   - Importa `searchUtils`, `dataUtils`, y `stationUtils` en tu archivo.

   ```javascript
   const { deepSearch } = require('./utils/searchUtils');
   const { getStation, getAllStations } = require('./utils/dataUtils');
   const { createEmbed } = require('./utils/stationUtils');
   ```

2. **Realizar una Búsqueda:**
   - Usa `deepSearch` para buscar estaciones.

   ```javascript
   const matches = await deepSearch("San Pablo", { maxResults: 5 });
   ```

3. **Obtener Detalles de una Estación:**
   - Usa `getStation` para obtener información detallada de una estación.

   ```javascript
   const station = getStation("sanpablol1");
   ```

4. **Mostrar la Información en un Embed:**
   - Usa `createEmbed` para formatear y mostrar la información de la estación.

   ```javascript
   const embed = createEmbed(station);
   interaction.followUp({ embeds: [embed] });
   ```

5. **Manejar Autocompletado:**
   - Usa `deepSearch` en la función `autocomplete` para proporcionar sugerencias.

   ```javascript
   async function autocomplete(interaction) {
       const query = interaction.options.getFocused();
       const matches = await deepSearch(query, { maxResults: 25 });
       await interaction.respond(matches.map(m => ({
           name: `${m.name} (Línea ${m.line})`,
           value: m.name
       })));
   }
   ```

---

### **Conclusión**

Este sistema está diseñado para proporcionar una experiencia robusta y amigable para buscar y mostrar información de estaciones de metro. Al separar las responsabilidades en `dataUtils`, `searchUtils` y `stationUtils`, el código es modular, mantenible y escalable. Cada módulo desempeña un papel específico en el flujo de datos, asegurando resultados eficientes y precisos para el usuario.
