# **Gu√≠a Completa de Integraci√≥n: Comandos de Discord con Sistema Metro**

## **üöá Visi√≥n General**
Este documento explica c√≥mo interactuar con **todos los componentes del sistema Metro** mediante comandos de Discord (/), incluyendo:
- B√∫squeda de estaciones/l√≠neas
- Consulta de estados operativos
- Gesti√≥n de datos en tiempo real
- Sistemas de notificaciones

## **üìö Tabla de Contenidos**
1. [Estructura B√°sica](#estructura-b√°sica)
2. [B√∫squeda de Estaciones](#b√∫squeda-de-estaciones)
3. [Consulta de L√≠neas](#consulta-de-l√≠neas)
4. [Estado Operativo](#estado-operativo)
5. [Notificaciones](#notificaciones)
6. [Sistemas Avanzados](#sistemas-avanzados)
7. [Manejo de Errores](#manejo-de-errores)
8. [Ejemplos Completos](#ejemplos-completos)

---

## **1Ô∏è‚É£ Estructura B√°sica**

### **Configuraci√≥n Inicial**
```javascript
// Importaci√≥n de m√≥dulos
const { MetroCore, SearchCore } = require('./modules/metro');
const { EmbedBuilder } = require('discord.js');

// Inicializaci√≥n
const metro = new MetroCore();
const search = new SearchCore('station');
```

### **Esqueleto de Comando**
```javascript
module.exports = {
    name: 'metro',
    description: 'Interact√∫a con el sistema Metro',
    options: [], // Definidos en cada secci√≥n
    async execute(interaction) {
        await metro.initialize(); // Asegurar datos cargados
        // L√≥gica espec√≠fica
    }
};
```

---

## **2Ô∏è‚É£ B√∫squeda de Estaciones**

### **Comando `/buscar-estacion`**
```javascript
options: [
    {
        name: 'nombre',
        description: 'Nombre de la estaci√≥n',
        type: 3, // STRING
        required: true
    },
    {
        name: 'linea',
        description: 'Filtrar por l√≠nea',
        type: 3, // STRING
        choices: [
            { name: 'L√≠nea 1', value: 'l1' },
            // ... otras l√≠neas
        ]
    }
],

async execute(interaction) {
    const query = interaction.options.getString('nombre');
    const lineFilter = interaction.options.getString('linea');

    const results = await search.search(query, { 
        lineFilter,
        maxResults: 5 
    });

    if (results.length === 0) {
        return interaction.reply('‚ùå No se encontraron estaciones');
    }

    const embed = new EmbedBuilder()
        .setTitle(`Resultados para "${query}"`)
        .addFields(
            results.map(r => ({
                name: r.name,
                value: `L√≠nea: ${r.line.toUpperCase()} | Score: ${r.score.toFixed(2)}`
            }))
        );

    await interaction.reply({ embeds: [embed] });
}
```

---

## **3Ô∏è‚É£ Consulta de L√≠neas**

### **Comando `/info-linea`**
```javascript
options: [
    {
        name: 'linea',
        description: 'L√≠nea a consultar',
        type: 3, // STRING
        required: true,
        choices: [
            { name: 'L√≠nea 1', value: 'l1' },
            // ... otras l√≠neas
        ]
    }
],

async execute(interaction) {
    const lineId = interaction.options.getString('linea');
    const line = metro.lines.get(lineId);
    const status = metro.getLineStatus(lineId);

    const embed = new EmbedBuilder()
        .setTitle(`Informaci√≥n L√≠nea ${lineId.toUpperCase()}`)
        .setColor(line.color)
        .addFields(
            { name: 'Estado', value: status, inline: true },
            { name: 'Estaciones', value: line.stations.length.toString(), inline: true },
            { name: 'Flota', value: line.fleet.map(t => t.id).join(', ') }
        );

    await interaction.reply({ embeds: [embed] });
}
```

---

## **4Ô∏è‚É£ Estado Operativo**

### **Comando `/estado`**
```javascript
options: [
    {
        name: 'tipo',
        description: 'Tipo de consulta',
        type: 3, // STRING
        choices: [
            { name: 'Red Completa', value: 'full' },
            { name: 'L√≠nea Espec√≠fica', value: 'line' }
        ]
    }
],

async execute(interaction) {
    const type = interaction.options.getString('tipo') || 'full';

    if (type === 'line') {
        // Implementar selecci√≥n de l√≠nea similar a /info-linea
    } else {
        const allStatus = metro.lines.getAll().map(line => {
            return `${line.id.toUpperCase()}: ${metro.getLineStatus(line.id)}`;
        });

        await interaction.reply({
            content: `**Estado de la Red:**\n${allStatus.join('\n')}`,
            ephemeral: true
        });
    }
}
```

---

## **5Ô∏è‚É£ Notificaciones**

### **Sistema de Suscripciones**
```javascript
options: [
    {
        name: 'accion',
        description: 'Acci√≥n a realizar',
        type: 3, // STRING
        choices: [
            { name: 'Suscribir', value: 'subscribe' },
            { name: 'Desuscribir', value: 'unsubscribe' }
        ],
        required: true
    },
    {
        name: 'linea',
        description: 'L√≠nea a monitorear',
        type: 3, // STRING
        choices: [
            { name: 'Todas', value: 'all' },
            // ... l√≠neas individuales
        ]
    }
],

async execute(interaction) {
    const action = interaction.options.getString('accion');
    const line = interaction.options.getString('linea');

    // L√≥gica de suscripci√≥n
    if (action === 'subscribe') {
        metro.subscribe(interaction.user.id, line || 'all');
        await interaction.reply({
            content: `‚úÖ Suscrito a actualizaciones de ${line === 'all' ? 'todas las l√≠neas' : 'L√≠nea ' + line.toUpperCase()}`,
            ephemeral: true
        });
    } else {
        metro.unsubscribe(interaction.user.id);
        await interaction.reply({
            content: '‚ùå Suscripci√≥n cancelada',
            ephemeral: true
        });
    }
}
```

---

## **6Ô∏è‚É£ Sistemas Avanzados**

### **Comando `/ruta` (C√°lculo de Trayectos)**
```javascript
options: [
    {
        name: 'origen',
        description: 'Estaci√≥n de origen',
        type: 3, // STRING
        required: true,
        autocomplete: true
    },
    {
        name: 'destino',
        description: 'Estaci√≥n de destino',
        type: 3, // STRING
        required: true,
        autocomplete: true
    }
],

async execute(interaction) {
    const from = interaction.options.getString('origen');
    const to = interaction.options.getString('destino');

    const route = metro.calculateRoute(from, to);

    // Implementar l√≥gica de visualizaci√≥n
    await interaction.reply({
        embeds: [/* Embed con detalles de ruta */],
        components: [/* Botones para m√°s opciones */]
    });
}
```

---

## **7Ô∏è‚É£ Manejo de Errores**

### **Ejemplo Robustecido**
```javascript
async execute(interaction) {
    try {
        await metro.initialize();
        
        const line = interaction.options.getString('linea');
        if (!metro.lines.get(line)) {
            return interaction.reply({
                content: '‚ùå L√≠nea no v√°lida',
                ephemeral: true
            });
        }

        // Resto de l√≥gica...

    } catch (error) {
        console.error(error);
        await interaction.reply({
            content: '‚ö†Ô∏è Error al procesar la solicitud',
            ephemeral: true
        });
    }
}
```

---

## **8Ô∏è‚É£ Ejemplos Completos**

### **Flujo Completo: B√∫squeda + Informaci√≥n**
```mermaid
sequenceDiagram
    Usuario->>Bot: /buscar-estacion nombre:"Plaza" linea:l1
    Bot->>Sistema Metro: search("Plaza", {lineFilter: "l1"})
    Sistema Metro-->>Bot: Resultados
    Bot->>Usuario: Muestra embed con opciones
    Usuario->>Bot: Selecciona estaci√≥n (bot√≥n/interacci√≥n)
    Bot->>Sistema Metro: getStationDetails()
    Sistema Metro-->>Bot: Datos completos
    Bot->>Usuario: Muestra informaci√≥n detallada
```

### **Implementaci√≥n con Componentes**
```javascript
// B√∫squeda inicial
const results = await search.search(query);
await interaction.reply({
    content: 'Selecciona una estaci√≥n:',
    components: [
        new ActionRowBuilder().addComponents(
            new StringSelectMenuBuilder()
                .setCustomId('select-station')
                .addOptions(
                    results.map(r => ({
                        label: r.name,
                        value: r.id
                    }))
                )
        )
    ]
});

// Handler para selecci√≥n
module.exports = {
    customId: 'select-station',
    async execute(interaction) {
        const stationId = interaction.values[0];
        const station = metro.stations.get(stationId);
        
        await interaction.update({
            content: `Informaci√≥n de ${station.name}`,
            embeds: [/* Embed con detalles */],
            components: [] // Limpiar componentes
        });
    }
};
```

---

## **üìå Mejores Pr√°cticas**
1. **Validar datos**: Siempre verificar que estaciones/l√≠neas existan
2. **Usar ephemeral**: Para respuestas sensibles o prolongadas
3. **Limitar resultados**: Paginar cuando hay muchos datos
4. **Actualizar cach√©**: Verificar `metro.lastUpdated` para datos frescos
5. **Manejar timeouts**: Usar `interaction.deferReply()` para operaciones largas

---

Este sistema permite **acceso completo** a todas las funcionalidades del Metro desde Discord, con:
- Consultas en tiempo real
- Interfaz intuitiva
- Manejo robusto de errores
- Integraci√≥n con componentes interactivos

¬øNecesitas ejemplos adicionales para casos de uso espec√≠ficos?