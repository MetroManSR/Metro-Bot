# **Documentaci√≥n Exhaustiva del Sistema Metro**

## **üåê Visi√≥n General del Sistema**
El sistema Metro es una plataforma completa que integra m√∫ltiples m√≥dulos para gestionar toda la operaci√≥n de una red de metro, incluyendo:

- **B√∫squeda avanzada** de estaciones y l√≠neas
- **Gesti√≥n de estados operativos** en tiempo real
- **Procesamiento y normalizaci√≥n** de datos
- **Integraci√≥n con Discord** para notificaciones
- **Sistema de cach√© y recuperaci√≥n** de datos

## **üìö Tabla de Contenidos Detallada**

1. [Arquitectura del Sistema](#arquitectura-del-sistema)
2. [Sistema de B√∫squeda](#sistema-de-b√∫squeda)
3. [Gesti√≥n de Estados](#gesti√≥n-de-estados)
4. [N√∫cleo MetroCore](#n√∫cleo-metrocore)
5. [Manejo de Datos](#manejo-de-datos)
6. [Utilitarios](#utilitarios)
7. [Integraci√≥n con Discord](#integraci√≥n-con-discord)
8. [Manejo de Errores](#manejo-de-errores)
9. [Optimizaci√≥n de Rendimiento](#optimizaci√≥n-de-rendimiento)
10. [Ejemplos Completos](#ejemplos-completos)

---

## **üèóÔ∏è Arquitectura del Sistema**

### **Estructura de Directorios**
```bash
modules/
‚îú‚îÄ‚îÄ metro/
‚îÇ   ‚îú‚îÄ‚îÄ core/
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ MetroCore.js         # Clase principal
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ DataLoader.js        # Cargador de datos
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ managers/
‚îÇ   ‚îÇ       ‚îú‚îÄ‚îÄ StationManager.js
‚îÇ   ‚îÇ       ‚îî‚îÄ‚îÄ LineManager.js
‚îÇ   ‚îú‚îÄ‚îÄ search/                 # Sistema de b√∫squeda
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ SearchCore.js
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ strategies/
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ ExactSearch.js
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ PartialSearch.js
‚îÇ   ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ SimilaritySearch.js
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ filters/
‚îÇ   ‚îÇ       ‚îú‚îÄ‚îÄ LineFilter.js
‚îÇ   ‚îÇ       ‚îî‚îÄ‚îÄ StatusFilter.js
‚îÇ   ‚îú‚îÄ‚îÄ status/                 # Sistema de estados
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ ChangeDetector.js
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ StatusConfig.js
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ StatusEmbedBuilder.js
‚îÇ   ‚îî‚îÄ‚îÄ utils/
‚îÇ       ‚îú‚îÄ‚îÄ stringHandlers/     # Utilitarios
‚îÇ       ‚îÇ   ‚îú‚îÄ‚îÄ decorators.js
‚îÇ       ‚îÇ   ‚îú‚îÄ‚îÄ lineProcessing.js
‚îÇ       ‚îÇ   ‚îî‚îÄ‚îÄ ...
‚îÇ       ‚îî‚îÄ‚îÄ timeCalculations.js
‚îî‚îÄ‚îÄ config.js                  # Configuraci√≥n global
```

### **Diagrama de Flujo Principal**
```mermaid
graph TD
    A[API/Datos] --> B[DataLoader]
    B --> C[MetroCore]
    C --> D[StationManager]
    C --> E[LineManager]
    C --> F[SearchSystem]
    C --> G[StatusSystem]
    D --> H[B√∫squedas]
    E --> I[Gesti√≥n L√≠neas]
    F --> J[Resultados]
    G --> K[Estado Actual]
    H --> L[Interfaz Usuario]
    I --> L
    J --> L
    K --> L
```

---

## **üîç Sistema de B√∫squeda**

### **Componentes Clave**

1. **SearchCore**
   - Punto de entrada principal
   - Configuraci√≥n de umbrales y pesos
   ```javascript
   new SearchCore('station', {
     similarityThreshold: 0.6,
     phoneticWeight: 0.4
   })
   ```

2. **Estrategias de B√∫squeda**
   - **ExactSearch**: Coincidencias perfectas
     ```javascript
     new ExactSearch({ metaphone: spanishMetaphone })
     ```
   - **PartialSearch**: B√∫squeda por subcadenas
     ```javascript
     new PartialSearch({ minLength: 3 })
     ```
   - **SimilaritySearch**: B√∫squeda difusa
     ```javascript
     new SimilaritySearch({
       threshold: 0.5,
       phoneticWeight: 0.7
     })
     ```

3. **Filtros**
   - **LineFilter**: Filtrado por l√≠nea
     ```javascript
     apply(results, { lineFilter: 'l1' })
     ```
   - **StatusFilter**: Filtrado por estado operativo
     ```javascript
     apply(results, { statusFilter: 'operational' })
     ```

### **Procesamiento Fon√©tico para Espa√±ol**
| Regla | Ejemplo | Coincidencias |
|-------|---------|---------------|
| `ll ‚Üí J` | `llave ‚Üí JAVE` | `yave`, `llave` |
| `√± ‚Üí N` | `a√±o ‚Üí ANO` | `ano`, `a√±o` |
| `h ‚Üí (silente)` | `hola ‚Üí OLA` | `ola` |

Configuraci√≥n avanzada:
```javascript
_configureSpanishRules() {
  this.metaphone.addRules([
    ['g√©', 'HE', 'HE'], // "gente" ‚Üí "HENTE"
    ['gi', 'HI', 'HI']  // "girasol" ‚Üí "HIRASOL"
  ]);
}
```

### **Ejemplo Completo de B√∫squeda**
```javascript
const search = new SearchCore('station', {
  similarityThreshold: 0.5,
  phoneticWeight: 0.6
});

const results = await search.search("Plza Maipu", {
  maxResults: 3,
  lineFilter: 'l5',
  statusFilter: 'operational'
});

/* Resultado:
[
  {
    id: "plaza_maipu_l5",
    name: "Plaza Maip√∫",
    line: "l5",
    score: 0.92,
    matchType: 'similar',
    phoneticMatch: true
  }
]
*/
```

---

## **üö¶ Gesti√≥n de Estados**

### **C√≥digos de Estado**
| C√≥digo | Estado | Color | Emoji | Condiciones |
|--------|--------|-------|-------|-------------|
| 0 | Nocturno | `#3498db` | üåô | 00:00 - 06:00 hrs |
| 1 | Operativo | `#2ecc71` | üü¢ | Horario normal |
| 2 | Cerrado | `#95a5a6` | ‚õî | Fuera de horario |
| 3 | Parcial | `#f39c12` | üü° | Fallas parciales |
| 4 | Retrasado | `#e67e22` | ‚ö†Ô∏è | Demoras >15 min |
| 5 | Extendido | `#9b59b6` | üåô‚ûï | Eventos especiales |

### **Componentes Principales**
1. **ChangeDetector**
   - Compara estados anteriores/actuales
   - Detecta cambios en l√≠neas/estaciones
   ```javascript
   {
     timestamp: Date,
     network: { statusChanged: boolean, oldStatus: string, newStatus: string },
     lines: Array<{ lineId: string, changeType: string }>,
     stations: Array<{ stationId: string, changeType: string }>
   }
   ```

2. **StatusEmbedBuilder**
   - Genera mensajes ricos para Discord
   ```javascript
   new StatusEmbedBuilder().buildLineStatus('l1', 'operational')
   ```

### **Ejemplo de Evento Especial**
```json
{
  "date": "2025-03-23",
  "name": "Lollapalooza 2025",
  "extendedHours": {
    "opening": "06:30",
    "closing": "01:30"
  },
  "affectedStations": ["PAJARITOS", "BAQUEDANO"]
}
```

---

## **‚öôÔ∏è N√∫cleo MetroCore**

### **M√©todos Principales**
| M√©todo | Descripci√≥n | Ejemplo |
|--------|-------------|---------|
| `initialize()` | Carga datos iniciales | `await metro.initialize()` |
| `getStation()` | Obtiene datos de estaci√≥n | `metro.getStation("baquedano")` |
| `getLine()` | Obtiene datos de l√≠nea | `metro.getLine("l1")` |
| `setLineStatus()` | Actualiza estado | `metro.setLineStatus("l1", "delayed")` |

### **Configuraci√≥n**
```javascript
new MetroCore(discordClient, {
  debug: true,       // Logs detallados
  maxRetries: 5,     // Reintentos para fallos
  retryDelay: 2000,  // Espera entre reintentos (ms)
  shouldRetry: (err) => !err.isFatal
})
```

### **Sistema de Cach√©**
```mermaid
graph LR
    A[API] --> B[Memoria]
    B --> C[Base de Datos]
    C --> D[Datos de Emergencia]
```

---

## **üìä Manejo de Datos**

### **Transformaci√≥n de Datos**
```javascript
_transformStations(rawData) {
  return {
    id: rawData.id.toLowerCase(),
    name: rawData.nombre,
    line: rawData.linea,
    status: rawData.estado || "operational",
    details: {
      amenities: rawData.servicios.map(/*...*/)
    }
  };
}
```

### **Estructura de Datos**
**Estaci√≥n:**
```javascript
{
  "san_pablo": {
    "id": "san_pablo",
    "line": "l1",
    "displayName": "San Pablo",
    "status": "operational",
    "connections": {
      "transports": ["Centropuerto"],
      "bikes": ["L√≠nea Cero"]
    }
  }
}
```

**L√≠nea:**
```javascript
{
  "l1": {
    "id": "l1",
    "displayName": "L√≠nea 1",
    "color": "#EA2A0A",
    "fleet": [
      {
        "id": "NS-07",
        "specs": {
          "maxSpeed": "80 km/h",
          "capacity": 950
        }
      }
    ]
  }
}
```

---

## **üõ†Ô∏è Utilitarios**

### **Normalizaci√≥n de Texto**
```javascript
function normalize(text) {
  return text.normalize("NFD")
    .replace(/[\u0300-\u036f]/g, "")
    .toLowerCase();
}
// "M√°quina Ver√°" ‚Üí "maquina vera"
```

### **Procesamiento de L√≠neas**
```javascript
normalizeKey("L2") ‚Üí "l2"
formatDisplay("4a") ‚Üí "L√≠nea 4A"
extractNumber("L√≠nea 2") ‚Üí "2"
```

### **Decoraci√≥n para Discord**
```javascript
decorateStation("Baquedano", { 
  line: "L1", 
  status: "1",
  transfer: true 
})
// ‚Üí "üü© <:Linea1:123> Baquedano ‚ÜîÔ∏è"
```

---

## **ü§ñ Integraci√≥n con Discord**

### **Ejemplo Completo**
```javascript
client.on('messageCreate', async message => {
  if (message.content.startsWith('!estado')) {
    const line = message.content.split(' ')[1];
    const status = metro.getLineStatus(line);
    const embed = new StatusEmbedBuilder()
      .buildLineStatus(line, status);
    message.reply({ embeds: [embed] });
  }
});
```

---

## **üö® Manejo de Errores**

### **C√≥digos de Error Comunes**
| C√≥digo | Descripci√≥n | Soluci√≥n |
|--------|-------------|----------|
| `NO_RESULTS` | No hay coincidencias | Ajustar filtros |
| `INVALID_LINE` | L√≠nea no existe | Verificar con `getAll()` |
| `DATA_LOAD_FAILED` | Error carga datos | Reintentar o modo emergencia |

### **Ejemplo de Recuperaci√≥n**
```javascript
try {
  await metro.initialize();
} catch (err) {
  if (err.code === 'DATA_LOAD_FAILED') {
    metro.activateEmergencyMode();
  }
}
```

---

## **‚ö° Optimizaci√≥n de Rendimiento**

### **T√©cnicas Implementadas**
1. **Cach√© LRU** en memoria (1000 √≠tems)
2. **Indexado** para b√∫squedas r√°pidas
3. **Pre-procesamiento** fon√©tico
4. **Actualizaciones por lotes**

### **M√©tricas**
- **B√∫squedas**: 10,000/sec (M1 Pro)
- **Actualizaci√≥n de estados**: < 50ms
- **Carga inicial**: ~300ms (10,000 estaciones)

---

## **üìã Ejemplos Completos**

### **1. Sistema de B√∫squeda Integrado**
```javascript
const search = new SearchCore('station', {
  similarityThreshold: 0.5,
  phoneticWeight: 0.7
});

client.on('interactionCreate', async interaction => {
  if (!interaction.isCommand()) return;
  
  const query = interaction.options.getString('estaci√≥n');
  const results = await search.search(query, {
    maxResults: 5,
    interaction: interaction
  });

  if (results.length === 0) {
    return interaction.reply('No se encontraron estaciones');
  }

  const formatted = results.map(r => 
    `${decorateStation(r.name, { line: r.line })} (${r.score.toFixed(2)})`
  );

  interaction.reply(formatted.join('\n'));
});
```

### **2. Monitoreo de Estado en Tiempo Real**
```javascript
metro.on('lineStatusChanged', ({ lineId, status }) => {
  const channel = client.channels.cache.get('STATUS_CHANNEL_ID');
  const embed = new StatusEmbedBuilder()
    .buildLineStatus(lineId, status);
  channel.send({ embeds: [embed] });
});
```

---

Esta documentaci√≥n integra **todos los componentes** del sistema Metro con:
- Explicaciones detalladas de cada m√≥dulo
- Ejemplos de c√≥digo completos
- Diagramas de flujo y arquitectura
- Casos de uso reales
- Configuraciones avanzadas

Para implementaciones espec√≠ficas o problemas t√©cnicos, consultar los archivos fuente correspondientes o la referencia completa de la API. üöá