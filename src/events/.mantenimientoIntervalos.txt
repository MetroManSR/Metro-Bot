---

## **Guía Completa de Mantenimiento del Sistema de Actualizaciones del Metro**
*Versión 1.0 - Español*

---

### **1. Introducción**
Este sistema monitorea el estado del Metro en tiempo real, detecta cambios y publica actualizaciones en Discord. Consta de varios módulos que trabajan en conjunto para garantizar que la información sea precisa y esté actualizada.

---

### **2. Arquitectura del Sistema**
El sistema está compuesto por 4 módulos principales:

1. **API Fetcher (`metroDataHandler.js`)**: Obtiene datos del API del Metro.
2. **Change Detector (`changeDetector.js`)**: Detecta cambios en los datos.
3. **Metro Updates (`metroUpdates.js`)**: Publica actualizaciones en Discord.
4. **Presence Updater (`presenceUpdater.js`)**: Actualiza el estado del bot en Discord.

```mermaid
graph TD
  A[API Fetcher] -->|Datos cada 60s| B(Change Detector)
  B -->|Cambios detectados| C[Metro Updates]
  B -->|Cambios| D[Presence Updater]
  D -->|Mensajes| E((Discord))
  C -->|Embeds| E
```

---

### **3. Módulos Clave**

#### **3.1. API Fetcher (`metroDataHandler.js`)**
- **Función**: Obtiene datos del API del Metro y los almacena en caché.
- **Funciones Principales**:
  - `fetchMetroData()`: Obtiene datos del API.
  - `getCachedMetroData()`: Devuelve los datos almacenados en caché.
  - `storePreviousData(data)`: Almacena los datos para comparaciones futuras.
- **Salidas**:
  ```plaintext
  [INFO] Fetching Metro data from API...
  [INFO] Data fetched and stored successfully.
  ```

---

#### **3.2. Change Detector (`changeDetector.js`)**
- **Función**: Compara datos nuevos con los anteriores para detectar cambios.
- **Salida**: Array de objetos con formato:
  ```javascript
  [
    {
      type: 'line' | 'station',
      line: 'l1', // Clave de línea
      station: 'Baquedano', // Solo para estaciones
      oldStatus: 'Operativa',
      newStatus: 'Cerrada'
    }
  ]
  ```
- **Ejemplo de Salida**:
  ```plaintext
  [INFO] Change detected in line l1: Operativa -> Servicio suspendido
  [INFO] Change detected in station Baquedano (l5): Habilitada -> Cerrada
  ```

---

#### **3.3. Metro Updates (`metroUpdates.js`)**
- **Función**: Publica actualizaciones en Discord usando embeds.
- **Salidas Típicas**:
  - **Líneas**:
    ```plaintext
    [EMBED] 🚇 Cambios en Líneas
    📢 Líneas: 🟥 L1
    Estado anterior: Operativa
    Nuevo estado: Servicio suspendido
    ```
  - **Estaciones**:
    ```plaintext
    [EMBED] 🚉 Cambios en Estaciones
    ℹ️ Cerrada temporalmente
    Estaciones afectadas: Baquedano (L5)
    Estado anterior: Habilitada
    ```

---

#### **3.4. Presence Updater (`presenceUpdater.js`)**
- **Función**: Actualiza el estado del bot en Discord cada 30 segundos.
- **Lógica de Mensajes**:
  | Tipo de Mensaje               | Probabilidad | Ejemplo                     |
  |-------------------------------|--------------|-----------------------------|
  | Estado de Red (Cambios)       | 50%          | `Línea L1: Servicio suspendido` |
  | Próxima Estación              | 20%          | `Próxima Estación: Baquedano`   |
  | Mensajes Promocionales        | 30%          | `Usa /help para más info`       |

---

#### **3.5. API Update (`apiUpdate.js`)**
- **Función**: Coordina el ciclo de actualización de datos y embeds.
- **Funciones Principales**:
  - `processUpdates(client)`: Obtiene datos, detecta cambios y actualiza embeds.
  - `initializeApiUpdates(client)`: Inicializa el sistema y configura el intervalo de actualización.
- **Salidas**:
  ```plaintext
  [INFO] [Metro] Initializing API update system...
  [INFO] [Metro] Initial embeds updated successfully.
  [INFO] [Metro] Data fetch cycle started.
  ```

---

### **4. Flujo de Trabajo**

#### **4.1. Inicialización**
1. El bot inicia y llama a `initializeApiUpdates(client)`.
2. Se obtienen los datos iniciales del API.
3. Se actualizan los embeds en Discord.

#### **4.2. Ciclo de Actualización**
1. Cada 60 segundos, se ejecuta `processUpdates(client)`.
2. Se obtienen nuevos datos del API.
3. Se comparan con los datos anteriores usando `detectChanges`.
4. Si hay cambios, se actualizan los embeds y se almacenan los nuevos datos.

#### **4.3. Actualización de Presencia**
1. Cada 30 segundos, el `Presence Updater` actualiza el estado del bot.
2. Muestra mensajes como "Próxima Estación" o estados de líneas.

---

### **5. Diagramas de Flujo**

#### **5.1. Flujo General del Sistema**
```mermaid
graph TD
  A[Inicio] --> B[initializeApiUpdates]
  B --> C[Obtener datos iniciales]
  C --> D[Actualizar embeds iniciales]
  D --> E[Iniciar intervalo de 60s]
  E --> F[processUpdates]
  F --> G{Obtener nuevos datos}
  G -->|Éxito| H[Detectar cambios]
  G -->|Error| I[Registrar error]
  H -->|Cambios| J[Actualizar embeds]
  H -->|Sin cambios| K[Registrar "Sin cambios"]
  J --> L[Almacenar nuevos datos]
```

#### **5.2. Flujo de Presence Updater**
```mermaid
graph TD
  A[Inicio] --> B[Seleccionar tipo de mensaje]
  B -->|50%| C[Estado de Red]
  B -->|20%| D[Próxima Estación]
  B -->|30%| E[Mensaje Promocional]
  C --> F{¿Hay cambios?}
  F -->|Sí| G[Mostrar cambio aleatorio]
  F -->|No| H{¿Red operativa?}
  H -->|Sí| I["Mostrar 'Toda la Red Operativa'"]
  H -->|No| J["Mostrar 'Próxima Estación'"]
  D --> K[Seleccionar estación aleatoria]
  K --> L[Mostrar "Próxima Estación: [Estación]"]
  E --> M[Mostrar mensaje promocional]
```

---

### **6. Mantenimiento y Ajustes**

#### **6.1. Intervalo de Actualización**
- **Archivo**: `apiUpdate.js`.
- **Línea**: `setInterval(() => processUpdates(client), 60000);`.
- **Ajuste**: Cambiar `60000` (60 segundos) a otro valor si es necesario.

#### **6.2. Manejo de Errores**
- **Archivo**: `apiUpdate.js`.
- **Línea**: `logger.error(`Error during update process: ${error.message}`);`.
- **Ajuste**: Agregar lógica adicional para reintentos o notificaciones.

#### **6.3. Embeds**
- **Archivo**: `embedManager.js`.
- **Ajuste**: Modificar los embeds para cambiar colores, títulos o campos.

---

### **7. Posibles Problemas y Soluciones**

#### **7.1. No se detectan cambios**
- **Causa**: Los datos no están cambiando o el `changeDetector` no está comparando correctamente.
- **Solución**: Verificar que `detectChanges` esté comparando los campos correctos.

#### **7.2. Embeds no se actualizan**
- **Causa**: El canal de Discord no está configurado correctamente.
- **Solución**: Verificar que `TARGET_CHANNEL_ID` en `metroUpdates.js` sea correcto.

#### **7.3. El bot no actualiza su presencia**
- **Causa**: El `Presence Updater` no está recibiendo datos.
- **Solución**: Verificar que `getCachedMetroData()` devuelva datos válidos.

---

### **8. Conclusión**
Este sistema es robusto y modular, diseñado para mantener actualizada la información del Metro en Discord. Con esta guía, puedes entender cómo funciona cada componente y realizar ajustes según sea necesario. Si tienes preguntas o necesitas más detalles, ¡no dudes en preguntar! 🚇
