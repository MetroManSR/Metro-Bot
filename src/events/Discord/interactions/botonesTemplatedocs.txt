# **Documentaci√≥n Completa del Sistema de Botones Interactivos**

---

## **üìå 1. Estructura del Sistema**
```
src/
‚îú‚îÄ‚îÄ interactions/
‚îÇ   ‚îú‚îÄ‚îÄ buttons/
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ templates/       # Plantillas reutilizables
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ dinamicoContextual.js
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ selectorJerarquico.js
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ confirmacion.js
‚îÇ   ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ paginacion.js
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ comandos/        # Botones espec√≠ficos de comandos
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ moderacion/      # Botones de moderaci√≥n
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ ...             # Otras categor√≠as
‚îÇ   ‚îî‚îÄ‚îÄ index.js            # Cargador principal
‚îî‚îÄ‚îÄ utils/
    ‚îú‚îÄ‚îÄ contextManager.js   # Gesti√≥n de contexto
    ‚îú‚îÄ‚îÄ buttonTemplates.js  # Generadores de botones
    ‚îî‚îÄ‚îÄ interactionUtils.js # Utilidades para interacciones
```

---

## **üìú 2. Est√°ndar para Custom IDs**
Formato:  
`[prefijo]_[acci√≥n]_[commandId]_[userId]_[metadata-opcional]`

Ejemplos:
- `ctx_ban_cmd123_usr456` ‚Üí Bot√≥n de banear en comando `cmd123`
- `opt_roles_lvl2_parent789` ‚Üí Selector de roles nivel 2

---

## **üîß 3. Plantillas Principales**

### **üîÑ A. Bot√≥n Din√°mico Contextual**  
*(`/interactions/buttons/templates/dinamicoContextual.js`)*  
**Prop√≥sito**: Botones que cambian comportamiento seg√∫n el comando original.

**Estructura**:
```javascript
module.exports = {
    customId: 'ctx_', // Prefijo obligatorio
    ownerOnly: true,  // Solo el usuario que inici√≥ la interacci√≥n
    
    /**
     * @param {ButtonInteraction} interaction - Interacci√≥n de Discord
     * @param {Client} client - Cliente de Discord
     * @param {Object} context - Datos del comando inicial (opcional)
     */
    async execute(interaction, client, context) {
        const [_, action, commandId, userId] = interaction.customId.split('_');
        
        // 1. Validar usuario
        if (userId !== interaction.user.id) {
            return interaction.reply({ 
                content: '‚ùå Solo el usuario original puede interactuar.', 
                ephemeral: true 
            });
        }

        // 2. Obtener contexto del comando
        const commandContext = getCommandContext(commandId);
        
        // 3. L√≥gica personalizada
        const response = this.generateResponse(action, commandContext);
        
        // 4. Actualizar mensaje
        await interaction.update(response);
    },

    generateResponse(action, context) {
        // Ejemplo: Personalizar por tipo de comando
        switch(context?.commandType) {
            case 'moderacion':
                return {
                    content: `üî® Modo moderaci√≥n: ${action}`,
                    components: [this._buildModButtons(context)]
                };
            default:
                return { content: 'Acci√≥n completada', components: [] };
        }
    },

    _buildModButtons(context) {
        return new ActionRowBuilder().addComponents(
            new ButtonBuilder()
                .setCustomId(`ctx_ban_${context.commandId}_${context.userId}`)
                .setLabel('Banear')
                .setStyle(ButtonStyle.Danger),
            new ButtonBuilder()
                .setCustomId(`ctx_kick_${context.commandId}_${context.userId}`)
                .setLabel('Expulsar')
                .setStyle(ButtonStyle.Primary)
        );
    }
};
```

---

### **üìä B. Selector Jer√°rquico**  
*(`/interactions/buttons/templates/selectorJerarquico.js`)*  
**Prop√≥sito**: Men√∫s de selecci√≥n multi-nivel (ej: categor√≠as ‚Üí subcategor√≠as).

**C√≥mo usarlo**:
```javascript
module.exports = {
    customId: 'opt_',
    
    async execute(interaction) {
        const [_, type, level, parentId] = interaction.customId.split('_');
        
        // 1. Obtener opciones din√°micas
        const options = await fetchOptions({ type, level: parseInt(level), parentId });
        
        // 2. Generar filas de botones
        const rows = options.chunk(5).map(group => (
            new ActionRowBuilder().addComponents(
                group.map(opt => (
                    new ButtonBuilder()
                        .setCustomId(`opt_${type}_${level+1}_${opt.id}`)
                        .setLabel(opt.name)
                        .setStyle(this._getStyleByLevel(level))
                ))
            )
        ));

        // 3. Responder
        await interaction.update({ 
            content: `Selecciona una opci√≥n (Nivel ${level}):`,
            components: rows 
        });
    }
};
```

---

### **‚úÖ C. Plantilla de Confirmaci√≥n**  
*(`/interactions/buttons/templates/confirmacion.js`)*  
**Prop√≥sito**: Flujo de "¬øEst√°s seguro?" para acciones cr√≠ticas.

**Implementaci√≥n m√≠nima**:
```javascript
module.exports = {
    customId: 'conf_',
    requireConfirmation: true,

    execute(interaction) {
        const [_, choice, commandId] = interaction.customId.split('_');
        
        if (choice === 'yes') {
            // Ejecutar acci√≥n peligrosa
            interaction.update({ 
                content: '‚úÖ Acci√≥n confirmada', 
                components: [] 
            });
        } else {
            interaction.update({ 
                content: '‚ùå Acci√≥n cancelada', 
                components: [] 
            });
        }
    }
};
```

**Generaci√≥n de botones**:
```javascript
function createConfirmationButtons(commandId, userId) {
    return new ActionRowBuilder().addComponents(
        new ButtonBuilder()
            .setCustomId(`conf_yes_${commandId}_${userId}`)
            .setLabel('Confirmar')
            .setStyle(ButtonStyle.Success),
        new ButtonBuilder()
            .setCustomId(`conf_no_${commandId}_${userId}`)
            .setLabel('Cancelar')
            .setStyle(ButtonStyle.Danger)
    );
}
```

---

## **‚öôÔ∏è 4. Sistema de Contexto**  
*(`/utils/contextManager.js`)*

**Funcionalidades clave**:
```javascript
const contexts = new Map();

module.exports = {
    // Guardar contexto de un comando
    set(commandId, data) {
        contexts.set(commandId, { 
            ...data, 
            timestamp: Date.now() 
        });
    },

    // Obtener contexto
    get(commandId) {
        return contexts.get(commandId);
    },

    // Limpieza autom√°tica
    cleanup() {
        const now = Date.now();
        for (const [id, ctx] of contexts) {
            if (now - ctx.timestamp > 3600000) { // 1 hora
                contexts.delete(id);
            }
        }
    }
};
```

**Uso t√≠pico**:
```javascript
// Al ejecutar un comando:
const commandId = generateUniqueId();
contextManager.set(commandId, {
    commandType: 'moderacion',
    targetUser: interaction.options.getUser('usuario'),
    guild: interaction.guildId
});

// En el bot√≥n:
const context = contextManager.get(commandId);
```

---

## **üîó 5. Integraci√≥n con Comandos**
### **Ejemplo: Comando `/ban` con Botones**
```javascript
const { contextManager } = require('../../utils/contextManager');
const { createConfirmationButtons } = require('../../templates/confirmacion');

module.exports = {
    name: 'ban',
    async execute(interaction) {
        const commandId = `ban-${interaction.id}`;
        const targetUser = interaction.options.getUser('usuario');

        // Guardar contexto
        contextManager.set(commandId, {
            commandType: 'moderacion',
            targetUser: targetUser.id,
            moderator: interaction.user.id
        });

        // Responder con botones
        await interaction.reply({
            content: `¬øBanear a ${targetUser.tag}?`,
            components: [createConfirmationButtons(commandId, interaction.user.id)]
        });
    }
};
```

---

## **üõ†Ô∏è 6. Generadores de Botones**  
*(`/utils/buttonTemplates.js`)*

**Funciones predefinidas**:
```javascript
const { ActionRowBuilder, ButtonBuilder, ButtonStyle } = require('discord.js');

// Botones de paginaci√≥n
function createPagination(commandId, userId, currentPage, totalPages) {
    return new ActionRowBuilder().addComponents(
        new ButtonBuilder()
            .setCustomId(`page_prev_${commandId}_${userId}`)
            .setLabel('‚óÄ')
            .setStyle(ButtonStyle.Primary)
            .setDisabled(currentPage <= 0),
        new ButtonBuilder()
            .setCustomId(`page_next_${commandId}_${userId}`)
            .setLabel('‚ñ∂')
            .setStyle(ButtonStyle.Primary)
            .setDisabled(currentPage >= totalPages - 1)
    );
}

// Botones de navegaci√≥n
function createNavigation(commandId, userId, canGoBack = true) {
    return new ActionRowBuilder().addComponents(
        new ButtonBuilder()
            .setCustomId(`nav_back_${commandId}_${userId}`)
            .setLabel('Atr√°s')
            .setStyle(ButtonStyle.Secondary)
            .setDisabled(!canGoBack),
        new ButtonBuilder()
            .setCustomId(`nav_home_${commandId}_${userId}`)
            .setLabel('Inicio')
            .setStyle(ButtonStyle.Success)
    );
}
```

---

## **üìå 7. Buenas Pr√°cticas**
1. **Prefijos descriptivos**: Usar `mod_`, `util_`, `game_` para categorizar.
2. **Validar ownership**: Siempre verificar `userId === interaction.user.id`.
3. **Limpiar cach√©**: Usar `contextManager.cleanup()` peri√≥dicamente.
4. **Documentar customIDs**: Mantener un registro de los formatos usados.

---

## **üö® 8. Soluci√≥n de Problemas**
| Error                          | Causa Probable                     | Soluci√≥n                          |
|--------------------------------|------------------------------------|-----------------------------------|
| "Unknown Interaction"          | Bot√≥n usado despu√©s de 15 minutos  | Usar `interaction.deferUpdate()` |
| "Invalid Custom ID"            | Formato incorrecto                 | Verificar `[prefijo]_[accion]_[commandId]_[userId]` |
| "Missing Permissions"          | Falta `permissions` en el handler  | A√±adir `permissions: ['Permiso']` |

---

Con este sistema, tendr√°s:  
‚úÖ **Botones 100% reutilizables**  
‚úÖ **Contexto persistente entre interacciones**  
‚úÖ **M√°xima flexibilidad para casos complejos**  
‚úÖ **F√°cil mantenimiento y escalabilidad**  

¬øNecesitas ejemplos adicionales o ajustes para casos de uso espec√≠ficos?