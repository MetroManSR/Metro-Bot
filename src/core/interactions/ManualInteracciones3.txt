# **Manual Completo del Sistema de Interacciones para Discord.js**  
**Versi√≥n: 1.0**  
**Directorio: `modules/interactions`**  

---

## **üìå 1. Introducci√≥n**  
Este sistema modular permite gestionar interacciones (botones, men√∫s de selecci√≥n, modales y comandos de contexto) en Discord.js v14+, con:  
‚úÖ **Flexibilidad total** (sin ejemplos predefinidos)  
‚úÖ **Persistencia de datos** (memoria + SQLite/JSON)  
‚úÖ **Validaci√≥n de usuarios**  
‚úÖ **Gesti√≥n de expiraci√≥n**  
‚úÖ **Estructura escalable**  

---

## **üõ† 2. Estructura del Sistema**  
```
modules/
‚îî‚îÄ‚îÄ interactions/
    ‚îú‚îÄ‚îÄ buttons/              # Botones interactivos
    ‚îú‚îÄ‚îÄ selectMenus/          # Men√∫s desplegables
    ‚îú‚îÄ‚îÄ modals/               # Formularios modales
    ‚îú‚îÄ‚îÄ contextMenus/         # Men√∫s contextuales (click derecho)
    ‚îú‚îÄ‚îÄ utils/                # Utilidades centrales
    ‚îî‚îÄ‚îÄ interactionHandler.js # N√∫cleo del sistema
```

---

## **‚öô 3. Configuraci√≥n Inicial**  

### **3.1. Instalaci√≥n de Dependencias**  
```bash
npm install discord.js quick.db lowdb
```

### **3.2. Registro en el Cliente**  
En tu archivo principal (`index.js`):  
```javascript
const { Client } = require('discord.js');
const interactionHandler = require('./modules/interactions/interactionHandler');

const client = new Client({ intents: [...] });

client.on('ready', () => {
  console.log(`Bot listo como ${client.user.tag}`);
});

client.on(interactionHandler.name, interactionHandler.execute);
```

---

## **üß© 4. Creaci√≥n de Componentes**  

### **4.1. Botones Personalizados**  
**Archivo:** `modules/interactions/buttons/templates/baseButton.js`  

#### **Uso B√°sico**  
```javascript
const BaseButton = require('./baseButton');

class MiBoton extends BaseButton {
  constructor() {
    super();
    this.customIdPrefix = 'miBoton';
    this.cooldown = 5000; // 5 segundos
  }

  async build(metadata) {
    const customId = this.generateCustomId(metadata);
    return new ActionRowBuilder().addComponents(
      new ButtonBuilder()
        .setCustomId(customId)
        .setLabel('Presionar')
        .setStyle(ButtonStyle.Primary)
    );
  }

  async handleInteraction(interaction, metadata) {
    await interaction.reply({
      content: `Bot√≥n presionado con metadata: ${JSON.stringify(metadata)}`,
      ephemeral: true
    });
  }
}

// Registro en el sistema
buttons.register(MiBoton);
```

---

### **4.2. Men√∫s de Selecci√≥n**  
**Archivo:** `modules/interactions/selectMenus/templates/baseSelectMenu.js`  

#### **Ejemplo:**  
```javascript
const BaseSelectMenu = require('./baseSelectMenu');

class MiMenu extends BaseSelectMenu {
  constructor() {
    super();
    this.customIdPrefix = 'miMenu';
  }

  async handleInteraction(interaction, metadata, selectedValues) {
    await interaction.reply({
      content: `Seleccionaste: ${selectedValues.join(', ')}`,
      ephemeral: true
    });
  }
}

// Registro
selectMenus.register(MiMenu);
```

---

### **4.3. Modales (Formularios)**  
**Archivo:** `modules/interactions/modals/templates/baseModal.js`  

#### **Implementaci√≥n:**  
```javascript
const BaseModal = require('./baseModal');

class MiModal extends BaseModal {
  constructor() {
    super();
    this.customIdPrefix = 'miModal';
  }

  async build(metadata) {
    const modal = new ModalBuilder()
      .setCustomId(this.generateCustomId(metadata))
      .setTitle('Formulario');

    modal.addComponents(
      new ActionRowBuilder().addComponents(
        new TextInputBuilder()
          .setCustomId('respuesta')
          .setLabel('Ingresa tu respuesta')
          .setStyle(TextInputStyle.Paragraph)
      )
    );

    return modal;
  }

  async handleInteraction(interaction, metadata) {
    const respuesta = interaction.fields.getTextInputValue('respuesta');
    await interaction.reply(`Respondiste: ${respuesta}`);
  }
}

// Registro
modals.register(MiModal);
```

---

## **üîß 5. Gesti√≥n de Datos**  

### **5.1. Almacenamiento en Memoria (`interactionStore`)**  
```javascript
// Guardar datos (expira en 5 minutos por defecto)
interactionStore.set('clave', { dato: 'valor' }, 300000);

// Obtener datos
const datos = interactionStore.get('clave');

// Eliminar datos
interactionStore.delete('clave');
```

### **5.2. Persistencia en Base de Datos (`dataStore`)**  
```javascript
// Guardar datos permanentemente
await dataStore.set('usuario:123', { nombre: 'Ejemplo' });

// Recuperar datos
const usuario = await dataStore.get('usuario:123');

// Eliminar datos
await dataStore.delete('usuario:123');
```

---

## **‚ö† 6. Manejo de Errores**  
El sistema incluye captura autom√°tica de errores. Para personalizar:  
```javascript
async handleError(interaction, error) {
  await interaction.reply({
    content: '‚ùå Error personalizado: ' + error.message,
    ephemeral: true
  });
}
```

---

## **üîÑ 7. Mantenimiento**  

### **7.1. Actualizaciones**  
- **Interacciones:** Actualiza los m√©todos `build()` y `handleInteraction()` sin modificar el n√∫cleo.  
- **Persistencia:** Cambia `dataStore.js` para usar MongoDB/PostgreSQL si es necesario.  

### **7.2. Limpieza Autom√°tica**  
El `interactionStore` limpia datos expirados cada hora. Para limpieza manual:  
```javascript
interactionStore.clearExpired();
```

### **7.3. Debugging**  
Habilita logs en `interactionHandler.js`:  
```javascript
console.log('Interacci√≥n recibida:', interaction.type);
```

---

## **üéØ 8. Mejores Pr√°cticas**  
1. **Prefix √önicos:** Usa `customIdPrefix` distintos para cada componente.  
2. **Metadata Ligera:** No almacenes objetos complejos en `interactionStore`.  
3. **Cooldowns:** Evita spam con `this.cooldown` en los componentes.  
4. **Persistencia Selectiva:** Usa `dataStore` solo para datos cr√≠ticos.  

---


--- 

**üõ† ¬øProblemas?**  
Consulta los logs de error o abre un issue en el repositorio.  

**üöÄ ¬°Listo para implementar!**  
```javascript
const boton = new MiBoton();
await interaction.reply({
  content: '¬°Interact√∫a!',
  components: [await boton.build({ id: 1 })]
});
```