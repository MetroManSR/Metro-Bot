# Documentaci√≥n del Sistema Modular de Estado del Metro

## Tabla de Contenidos
1. [Introducci√≥n](#introducci√≥n)  
2. [Componentes Principales](#componentes-principales)  
3. [Flujo de Trabajo](#flujo-de-trabajo)  
4. [Configuraci√≥n de Estados](#configuraci√≥n-de-estados)  
5. [Manejo de Eventos y Horarios](#manejo-de-eventos-y-horarios)  
6. [Integraci√≥n con Discord](#integraci√≥n-con-discord)  
7. [Ejemplos de Uso](#ejemplos-de-uso)  

---

## 1. Introducci√≥n <a name="introducci√≥n"></a>
Este sistema monitoriza y gestiona el estado operativo del metro en tiempo real, integrando:  
- Detecci√≥n autom√°tica de cambios  
- Gesti√≥n de horarios y eventos especiales  
- Generaci√≥n de embeds para Discord  
- Priorizaci√≥n de estados seg√∫n normas chilenas  

**Caracter√≠sticas clave**:  
- Soporte para 6 estados operativos (0-5)  
- Zona horaria autom√°tica (America/Santiago)  
- Actualizaciones cada 5 minutos  
- Historial de cambios (√∫ltimas 100 actualizaciones)  

---

## 2. Componentes Principales <a name="componentes-principales"></a>

### 2.1. `MetroCore`  
**Responsabilidad**:  
- Fuente central de datos del metro  
- Conexi√≥n con API y base de datos  
- Construcci√≥n de √≠ndices r√°pidos  

**M√©todos clave**:  
```javascript
await metro.core.initialize()      // Inicializaci√≥n
await metro.core.updateCache()     // Actualizaci√≥n manual
metro.core.generateClosedState()   // Generar estado de cierre
```

### 2.2. `ChangeDetector`  
**Funcionalidad**:  
- Compara estados anteriores/actuales  
- Detecta:  
  - Cambios en l√≠neas/estaciones  
  - Eventos especiales  
  - Anomal√≠as temporales  

**Estructura de cambios**:  
```javascript
{
  timestamp: Date,
  network: { statusChanged: boolean, oldStatus: string, newStatus: string },
  lines: Array<{ lineId: string, changeType: string }>,
  stations: Array<{ stationId: string, changeType: string }>,
  events: Array<{ type: string, event: object }>
}
```

### 2.3. `StatusConfig`  
**Configuraciones**:  
```javascript
// modules/status/config/statusConfig.js
{
  STATUS_CODES: {
    0: { name: 'nocturno', emoji: 'üåô', color: '#3498db' },
    1: { name: 'operativo', emoji: 'üü¢', color: '#2ecc71' },
    2: { name: 'cerrado', emoji: '‚õî', color: '#95a5a6' },
    3: { name: 'parcial', emoji: 'üü°', color: '#f39c12' },
    4: { name: 'retrasado', emoji: '‚ö†Ô∏è', color: '#e67e22' },
    5: { name: 'extendido', emoji: 'üåô‚ûï', color: '#9b59b6' }
  },
  TIMEZONE: 'America/Santiago'
}
```

### 2.4. `StatusEmbedBuilder`  
**Ejemplo de Embed**:  
![Embed de Ejemplo](https://via.placeholder.com/400x200.png?text=Estado+de+L√≠nea+1+üü¢+Operativa)

---

## 3. Flujo de Trabajo <a name="flujo-de-trabajo"></a>
```mermaid
graph TD
  A[Actualizaci√≥n de Datos] --> B[ChangeDetector]
  B --> C{¬øCambios?}
  C -->|S√≠| D[Generar Embeds]
  C -->|No| E[Registrar Estabilidad]
  D --> F[Actualizar Mensajes en Discord]
  F --> G[Notificar a Canales]
```

---

## 4. Configuraci√≥n de Estados <a name="configuraci√≥n-de-estados"></a>
| C√≥digo | Estado        | Condiciones                          |
|--------|---------------|--------------------------------------|
| 0      | Nocturno      | 00:00 - 06:00 horas                  |
| 1      | Operativo     | Horario normal                       |
| 2      | Cerrado       | Fuera de horario                     |
| 3      | Parcial       | Fallas t√©cnicas parciales           |
| 4      | Retrasado     | Demoras mayores a 15 minutos         |
| 5      | Extendido     | Eventos especiales (+1 hora cierre)  |

---

## 5. Manejo de Eventos y Horarios <a name="manejo-de-eventos-y-horarios"></a>
### 5.1. Eventos Especiales (`events.json`)
```json
{
  "events": [
    {
      "date": "2025-03-23",
      "name": "Lollapalooza 2025",
      "extendedHours": {
        "opening": "06:30",
        "closing": "01:30"
      },
      "affectedStations": ["PAJARITOS", "BAQUEDANO"]
    }
  ]
}
```

### 5.2. Prioridades
1. **Eventos activos** > Horario normal  
2. **Horario extendido** aplica solo a estaciones listadas  
3. **Cierres programados** anulan otros estados  

---

## 6. Integraci√≥n con Discord <a name="integraci√≥n-con-discord"></a>
**Ejemplo de implementaci√≥n**:  
```javascript
// En tu bot de Discord
const { updateOverviewEmbed, updateLineEmbeds } = require('./modules/status/embeds');

client.on('ready', async () => {
  await metro.initialize(client);
  
  setInterval(async () => {
    const changes = metro.changeDetector.analyzeChanges();
    await updateOverviewEmbed(changes.summary);
    await updateLineEmbeds(changes.details);
  }, 300000); // 5 minutos
});
```

---

## 7. Ejemplos de Uso <a name="ejemplos-de-uso"></a>
### 7.1. Obtener estado de l√≠nea
```javascript
const linea1 = metro.lines.getLineInfo('l1');
console.log(linea1);
// Salida: { status: 1, stations: [...], lastUpdate: '2025-03-20T15:00:00-03:00' }
```

### 7.2. Forzar cierre por mantenci√≥n
```javascript
metro.forceClosedState();
// Actualiza todos los estados a c√≥digo 2
```

### 7.3. Monitorear cambios
```javascript
metro.changeDetector.on('change', (changes) => {
  console.log('Cambios detectados:', changes);
});
```

---

**Nota**: Esta documentaci√≥n asume el uso de Node.js 16+ y las dependencias:  
- `moment-timezone`  
- `discord.js`  
- `luxon` (para manejo de fechas)  

Para soporte t√©cnico, contactar al equipo de desarrollo.